doubleValues :
 - map function to return a new array 
 - math function to multiple each number by 2 
 
onlyEvenValues :
 - new var named evensOnly to return 
 - filter method to test each value in array 
 - math function determines if the number being 
   divided by 2 is 0 meaning its even

showFirstAndLast :
 - new var caleld newStr made to return at end
 - map method to create new array with requested 
   letters 
 - str[0] returns first character 
 - str[str.length -1] returns last character

addKeyAndValue :
 - forEach method to alter original array
 - res[key] = value sets the key to the value 
   that is passed in the parameter

vowelCount :
 - first change all possible uppercase letters to lowercase 
 - create a var with an array containing the vowels 
 - split the str using split('') to seperate each character 
 - use forEach method to check each character 
 - first if statement checks if current character is a vowel
   it incremenets its count by 1 
 - 2nd if statment checks if vowel is alr in the vowelCounter obj, 
   it increments it by 1 
 - else statement checks if vowel is not in vowelCounter, add it
   with a count of 1 

doubleValuesWithMap :
 - use map to return new array 
 - math method multiplies each number in array by 2 

valTimesIndex :
 - map method to return new array with results 
 - num and index parameters so we know the index of each value 
 - num * index multiplies the number by its own idex locaiton

extractKey :
 - new var named values to return at end 
 - map function to return new array with results 
 - obj[key] sets the new values of the array to the key 

extractFullName :
 - new variable named fullNames to return at end 
 - map method to create a new array 
 - obj.first retrieves first name 
 - + ' ' adds a space inbetween the names 
 - obj.last retrieves last name 

filterByValue :
 - newArr var to return end result 
 - filter method makes test cases againts the array 
 - returns a new array with the objs containing the key 

find : 
 - filter method to test cases againts the array 
 - the callback function checks if each 'item' is strictly equal 
   to the searchValue
 - it return true for the elements that match the searchValue so they 
   are included in foundItem
 - the return statment returns the first element (foundItem[0]);
 - if its empty, it returns undefined
 